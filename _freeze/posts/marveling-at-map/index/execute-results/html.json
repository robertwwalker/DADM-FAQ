{
  "hash": "390147ba06667c6fd322505fbdd3e436",
  "result": {
    "markdown": "---\ntitle: \"Marveling at map()\"\nsubtitle: \"Celebrating map\"\nauthor: 'Robert W. Walker'\ndate: '2023-02-05'\nimage: \"image.png\"\ncategories:\n  - R\n  - tidyverse\n  - map\ntags:\n  - R\n  - tidyverse\nbibliography: \"bibliography.bib\"\nnocite: |\n     @*\nformat: \n   html:\n     code-fold: true\n     code-copy: hover\n     code-block-border-left: true\n     df-print: paged\n     fig-format: retina\n     footnotes-hover: true\n     html-math-method: katex\n     toc: true\n     toc-title: Navigation\n---\n\n---\n\n**I want to learn about map and begin to replace my use of apply for everything.** \n\n\n\nGoal: import a directory full of csv files.\n\nMethod.  First, load `purrr` and the `tidyverse` and then create a tibble for the *filenames* because we are creating the example.  `map` wants to output a list so I have to unlist it into the tibble.\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(purrr)\n# Create a set of filenames\nfnames <- tibble(\n  filenames=unlist(\n  map(c(1:5), \n      ~paste0(\"file\",.x,\".csv\", sep=\"\")\n      )))\nfnames\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"filenames\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"file1.csv\"},{\"1\":\"file2.csv\"},{\"1\":\"file3.csv\"},{\"1\":\"file4.csv\"},{\"1\":\"file5.csv\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n## Create the files\n\nNow I need to create some files in a given directory.  I have created a directory called *fakedata*.\n\n```\ndir.create(\"fakedata\")\n```\n\nNow I want to write the data to the directory to conclude the reproducible example.  In this case, there are five csv files.\n\n```\nwalk(fnames$filenames, \n     ~ write.csv(data.frame(x1=rnorm(10),x2=rnorm(10)),       file = paste0(\"./fakedata/\",.x, sep=\"\")))\n```\n\nThat seems to work.\n\n![Photo of success](img/Screen Shot 2022-11-04 at 12.58.16 PM.png)\n\n\n## Loading the files\n\nThough I already know the names of the files, in most cases, I would need to collect them.  In this particular case, `dir()` will come in very handy.\n\n::: {.cell}\n\n```{.r .cell-code}\ndir(\"fakedata\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"file1.csv\" \"file2.csv\" \"file3.csv\" \"file4.csv\" \"file5.csv\"\n```\n:::\n\n```{.r .cell-code}\nfile.names <- dir(\"fakedata\")\n```\n:::\n\nNow let's take those and load the files.  We will combine `read.csv` with `map` to get a list containing all of the files.\n\n::: {.cell}\n\n```{.r .cell-code}\nread.files <- file.names %>% map(., ~ read.csv(paste0(\"fakedata/\",.x, sep=\"\")))\nread.files\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n    X          x1          x2\n1   1 -1.38001285 -1.22636540\n2   2  0.18200309 -0.47330201\n3   3  0.38672920  0.32228012\n4   4  1.59951536  0.17438280\n5   5  0.04066402 -2.17050573\n6   6 -0.25814383  0.35882778\n7   7 -1.09942888  0.05209077\n8   8 -0.96198031 -0.31535964\n9   9 -0.71146188 -0.88743843\n10 10 -0.90768963 -1.64463965\n\n[[2]]\n    X          x1          x2\n1   1 -0.93160098  0.38577793\n2   2 -1.11500843 -2.28599247\n3   3  0.48695836 -0.38091065\n4   4  0.43833164  1.94491090\n5   5  1.38558361  0.29454227\n6   6 -0.08697636  0.14269709\n7   7  1.32351741  0.29570675\n8   8 -0.51831633 -1.07216871\n9   9 -0.51175809  0.01959317\n10 10  0.89500573 -1.03716777\n\n[[3]]\n    X         x1          x2\n1   1 -0.8834481 -0.25006254\n2   2  1.0708784 -1.36573365\n3   3  0.3286340 -0.10929292\n4   4  1.2088226 -0.04355173\n5   5 -0.5257318 -0.47974675\n6   6  3.0484664 -0.32511134\n7   7 -0.2252273  1.23925377\n8   8  1.0458161 -1.18513179\n9   9  0.3243315  1.44062060\n10 10  0.8238747 -1.53231879\n\n[[4]]\n    X         x1          x2\n1   1  0.8460534  0.08150364\n2   2 -0.3220720  1.07239215\n3   3  1.3478005  1.18462705\n4   4  0.9222565  1.16223158\n5   5  1.1380822  1.05890088\n6   6  0.6123547 -1.46789361\n7   7 -0.2974722 -0.37149873\n8   8  1.0321546  0.15357759\n9   9 -0.3445316 -0.95253704\n10 10 -0.1112015 -0.64225964\n\n[[5]]\n    X          x1          x2\n1   1 -1.15093999  0.54168693\n2   2  0.35413293 -0.09396014\n3   3 -1.26696402  0.25582265\n4   4  0.06712394  1.23749986\n5   5  0.53648590  0.37711498\n6   6 -1.29457309  0.23440024\n7   7  0.44966760  0.45751493\n8   8 -0.42755728  0.89952539\n9   9 -0.06584558  0.09520603\n10 10 -0.50046918 -0.16258746\n```\n:::\n:::\n\nLet me stick the filenames on the list elements.  This allows any individual one to be addressed in a relatively intuitive way.  I show an example by calculating the mean of x1 in the third dataset.\n\n::: {.cell}\n\n```{.r .cell-code}\nclean.files <- read.files\nnames(clean.files) <- file.names\nclean.files\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$file1.csv\n    X          x1          x2\n1   1 -1.38001285 -1.22636540\n2   2  0.18200309 -0.47330201\n3   3  0.38672920  0.32228012\n4   4  1.59951536  0.17438280\n5   5  0.04066402 -2.17050573\n6   6 -0.25814383  0.35882778\n7   7 -1.09942888  0.05209077\n8   8 -0.96198031 -0.31535964\n9   9 -0.71146188 -0.88743843\n10 10 -0.90768963 -1.64463965\n\n$file2.csv\n    X          x1          x2\n1   1 -0.93160098  0.38577793\n2   2 -1.11500843 -2.28599247\n3   3  0.48695836 -0.38091065\n4   4  0.43833164  1.94491090\n5   5  1.38558361  0.29454227\n6   6 -0.08697636  0.14269709\n7   7  1.32351741  0.29570675\n8   8 -0.51831633 -1.07216871\n9   9 -0.51175809  0.01959317\n10 10  0.89500573 -1.03716777\n\n$file3.csv\n    X         x1          x2\n1   1 -0.8834481 -0.25006254\n2   2  1.0708784 -1.36573365\n3   3  0.3286340 -0.10929292\n4   4  1.2088226 -0.04355173\n5   5 -0.5257318 -0.47974675\n6   6  3.0484664 -0.32511134\n7   7 -0.2252273  1.23925377\n8   8  1.0458161 -1.18513179\n9   9  0.3243315  1.44062060\n10 10  0.8238747 -1.53231879\n\n$file4.csv\n    X         x1          x2\n1   1  0.8460534  0.08150364\n2   2 -0.3220720  1.07239215\n3   3  1.3478005  1.18462705\n4   4  0.9222565  1.16223158\n5   5  1.1380822  1.05890088\n6   6  0.6123547 -1.46789361\n7   7 -0.2974722 -0.37149873\n8   8  1.0321546  0.15357759\n9   9 -0.3445316 -0.95253704\n10 10 -0.1112015 -0.64225964\n\n$file5.csv\n    X          x1          x2\n1   1 -1.15093999  0.54168693\n2   2  0.35413293 -0.09396014\n3   3 -1.26696402  0.25582265\n4   4  0.06712394  1.23749986\n5   5  0.53648590  0.37711498\n6   6 -1.29457309  0.23440024\n7   7  0.44966760  0.45751493\n8   8 -0.42755728  0.89952539\n9   9 -0.06584558  0.09520603\n10 10 -0.50046918 -0.16258746\n```\n:::\n\n```{.r .cell-code}\nclean.files$file3.csv %>% summarise(mean(x1))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mean(x1)\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.6216417\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nmean(read.files[[3]]$x1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6216417\n```\n:::\n:::\n\nIf every spreadsheet happened to be the same, as these are, then we could also stack them.  There is a danger to the renaming because of the way it works with unlist.  Sticking with the original file, they are straightforward to stack using `map_dfr()`\n\n::: {.cell}\n\n```{.r .cell-code}\nstacked.files <- file.names %>% map_dfr(., ~ read.csv(paste0(\"fakedata/\",.x, sep=\"\")))\nstacked.files\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"X\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"x1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"x2\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"1\",\"2\":\"-1.38001285\",\"3\":\"-1.22636540\"},{\"1\":\"2\",\"2\":\"0.18200309\",\"3\":\"-0.47330201\"},{\"1\":\"3\",\"2\":\"0.38672920\",\"3\":\"0.32228012\"},{\"1\":\"4\",\"2\":\"1.59951536\",\"3\":\"0.17438280\"},{\"1\":\"5\",\"2\":\"0.04066402\",\"3\":\"-2.17050573\"},{\"1\":\"6\",\"2\":\"-0.25814383\",\"3\":\"0.35882778\"},{\"1\":\"7\",\"2\":\"-1.09942888\",\"3\":\"0.05209077\"},{\"1\":\"8\",\"2\":\"-0.96198031\",\"3\":\"-0.31535964\"},{\"1\":\"9\",\"2\":\"-0.71146188\",\"3\":\"-0.88743843\"},{\"1\":\"10\",\"2\":\"-0.90768963\",\"3\":\"-1.64463965\"},{\"1\":\"1\",\"2\":\"-0.93160098\",\"3\":\"0.38577793\"},{\"1\":\"2\",\"2\":\"-1.11500843\",\"3\":\"-2.28599247\"},{\"1\":\"3\",\"2\":\"0.48695836\",\"3\":\"-0.38091065\"},{\"1\":\"4\",\"2\":\"0.43833164\",\"3\":\"1.94491090\"},{\"1\":\"5\",\"2\":\"1.38558361\",\"3\":\"0.29454227\"},{\"1\":\"6\",\"2\":\"-0.08697636\",\"3\":\"0.14269709\"},{\"1\":\"7\",\"2\":\"1.32351741\",\"3\":\"0.29570675\"},{\"1\":\"8\",\"2\":\"-0.51831633\",\"3\":\"-1.07216871\"},{\"1\":\"9\",\"2\":\"-0.51175809\",\"3\":\"0.01959317\"},{\"1\":\"10\",\"2\":\"0.89500573\",\"3\":\"-1.03716777\"},{\"1\":\"1\",\"2\":\"-0.88344806\",\"3\":\"-0.25006254\"},{\"1\":\"2\",\"2\":\"1.07087838\",\"3\":\"-1.36573365\"},{\"1\":\"3\",\"2\":\"0.32863403\",\"3\":\"-0.10929292\"},{\"1\":\"4\",\"2\":\"1.20882258\",\"3\":\"-0.04355173\"},{\"1\":\"5\",\"2\":\"-0.52573184\",\"3\":\"-0.47974675\"},{\"1\":\"6\",\"2\":\"3.04846641\",\"3\":\"-0.32511134\"},{\"1\":\"7\",\"2\":\"-0.22522727\",\"3\":\"1.23925377\"},{\"1\":\"8\",\"2\":\"1.04581612\",\"3\":\"-1.18513179\"},{\"1\":\"9\",\"2\":\"0.32433151\",\"3\":\"1.44062060\"},{\"1\":\"10\",\"2\":\"0.82387468\",\"3\":\"-1.53231879\"},{\"1\":\"1\",\"2\":\"0.84605339\",\"3\":\"0.08150364\"},{\"1\":\"2\",\"2\":\"-0.32207204\",\"3\":\"1.07239215\"},{\"1\":\"3\",\"2\":\"1.34780048\",\"3\":\"1.18462705\"},{\"1\":\"4\",\"2\":\"0.92225652\",\"3\":\"1.16223158\"},{\"1\":\"5\",\"2\":\"1.13808219\",\"3\":\"1.05890088\"},{\"1\":\"6\",\"2\":\"0.61235469\",\"3\":\"-1.46789361\"},{\"1\":\"7\",\"2\":\"-0.29747222\",\"3\":\"-0.37149873\"},{\"1\":\"8\",\"2\":\"1.03215455\",\"3\":\"0.15357759\"},{\"1\":\"9\",\"2\":\"-0.34453156\",\"3\":\"-0.95253704\"},{\"1\":\"10\",\"2\":\"-0.11120152\",\"3\":\"-0.64225964\"},{\"1\":\"1\",\"2\":\"-1.15093999\",\"3\":\"0.54168693\"},{\"1\":\"2\",\"2\":\"0.35413293\",\"3\":\"-0.09396014\"},{\"1\":\"3\",\"2\":\"-1.26696402\",\"3\":\"0.25582265\"},{\"1\":\"4\",\"2\":\"0.06712394\",\"3\":\"1.23749986\"},{\"1\":\"5\",\"2\":\"0.53648590\",\"3\":\"0.37711498\"},{\"1\":\"6\",\"2\":\"-1.29457309\",\"3\":\"0.23440024\"},{\"1\":\"7\",\"2\":\"0.44966760\",\"3\":\"0.45751493\"},{\"1\":\"8\",\"2\":\"-0.42755728\",\"3\":\"0.89952539\"},{\"1\":\"9\",\"2\":\"-0.06584558\",\"3\":\"0.09520603\"},{\"1\":\"10\",\"2\":\"-0.50046918\",\"3\":\"-0.16258746\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n# References\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::write_bib(names(sessionInfo()$otherPkgs), file=\"bibliography.bib\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}