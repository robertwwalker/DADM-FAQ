{
  "hash": "f134c5f6f068c294325de0d9313c9cd7",
  "result": {
    "markdown": "---\ntitle: Visualizing One Qualitative Variable\nauthor: Robert W. Walker\ndate: '2020-09-12'\nslug: visualize-one-categorical\ncategories:\n  - R\ntags:\n  - plot\nsubtitle: ''\nsummary: ''\nauthors: []\nlastmod: '2020-09-12T20:04:06-07:00'\n---\n\n\n\n\n# Bonds\n\nA dataset for illustrating the various available visualizations needs a certain degree of richness with manageable size.  The dataset on *Bonds* contains three categorical and a few quantitative indicators sufficient to show what we might wish.\n\n## Loading the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds <- read.csv(url(\"https://raw.githubusercontent.com/robertwwalker/DADMStuff/master/BondFunds.csv\"))\n```\n:::\n\n\n## A Summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\nBonds %>%\n    skim()\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |184        |\n|Number of columns        |9          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|character                |4          |\n|numeric                  |5          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|Fund.Number   |         0|             1|   4|   6|     0|      184|          0|\n|Type          |         0|             1|  20|  23|     0|        2|          0|\n|Fees          |         0|             1|   2|   3|     0|        2|          0|\n|Risk          |         0|             1|   7|  13|     0|        3|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable  | n_missing| complete_rate|   mean|      sd|     p0|    p25|   p50|    p75|     p100|hist  |\n|:--------------|---------:|-------------:|------:|-------:|------:|------:|-----:|------:|--------:|:-----|\n|Assets         |         0|             1| 910.65| 2253.27|  12.40| 113.72| 268.4| 621.95| 18603.50|▇▁▁▁▁ |\n|Expense.Ratio  |         0|             1|   0.71|    0.26|   0.12|   0.53|   0.7|   0.90|     1.94|▂▇▅▁▁ |\n|Return.2009    |         0|             1|   7.16|    6.09|  -8.80|   3.48|   6.4|  10.72|    32.00|▁▇▅▁▁ |\n|X3.Year.Return |         0|             1|   4.66|    2.52| -13.80|   4.05|   5.1|   6.10|     9.40|▁▁▁▅▇ |\n|X5.Year.Return |         0|             1|   3.99|    1.49|  -7.30|   3.60|   4.3|   4.90|     6.80|▁▁▁▅▇ |\n:::\n:::\n\n\nMost data types are represented.  There is no time variable so dates and the visualizations that go with time series are omitted.\n\n# Data Visualization\n\nFirst, let us look at visualizations for one variable.\n\n## Bar plots and column plots\n\nThere are two ways to construct a barplot; we can let ggplot handle it on the raw data or calculate it ourselves.  Let me focus on *Risk*.\n\n\n## `geom_bar()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot() + aes(x = Risk) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### Raw Data Bar Plot [color]\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot() + aes(x = Risk, color = Risk) + geom_bar()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n### Raw Data Bar Plot [color and fill]\n\nWe could color it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot() + aes(x = Risk, color = Risk) + geom_bar(fill = \"white\") + guides(color = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### Raw Data Bar Plot [Fill]\n\nWe can fill the shapes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# guides(fill=FALSE) removes the legend\nBonds %>%\n    ggplot(., aes(x = Risk, fill = Risk)) + geom_bar() + guides(fill = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## `geom_bar()` meets `fill`\n\nWe can also deploy `fill` but x is no longer the axis; the axis is some constant value with frequencies filled by the fill.  *This will require some prettying.*\n\n### A Cumulative Bar Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBasic.Bar <- Bonds %>%\n    ggplot(., aes(x = \"\", fill = Risk)) + geom_bar()\nBasic.Bar\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nThe prettying will require that I eliminate the x axis [set it to empty], include a theme, and give it proper labels.\n\n### Enhanced Cumulative Bar Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = \"\", fill = Risk)) + geom_bar() + labs(x = \"\", y = \"Number of Funds\") +\n    theme_minimal() + theme(axis.text.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Proportion Bar Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = \"\", fill = Risk)) + geom_bar(position = \"fill\") + labs(x = \"\",\n    y = \"Proportion of Funds\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe prettying will require that I eliminate the x axis [set it to empty], include a theme, and give it proper labels.\n\n### Enhanced Proportion Bar Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = \"\", fill = Risk)) + geom_bar(position = \"fill\") + labs(x = \"\",\n    y = \"Propotion of Funds\") + theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## geom_col()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRisk.Table <- table(Bonds$Risk) %>%\n    data.frame()\nRisk.Table %>%\n    ggplot(., aes(x = Var1, y = Freq)) + geom_col()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Beautifying `geom_col()`\n\nNow it really needs some beautification.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRisk.Table %>%\n    ggplot(., aes(x = Var1, y = Freq, fill = Var1)) + geom_col() + labs(x = \"Risk Levels\",\n    y = \"Number of Funds\") + theme_minimal() + theme(axis.text.x = element_blank()) +\n    scale_fill_viridis_d() + guides(fill = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## `position = \"fill\"`\n\nThe two commands are symmetric in the sense that x as axis always splits it into multiple parts.  `fill` will prove very useful with a two dimensional table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRisk.Table %>%\n    ggplot(., aes(x = 1, y = Freq, fill = Var1)) + geom_col(position = \"fill\") +\n    labs(x = \"Risk Levels\", y = \"Number of Funds\") + theme_minimal() + theme(axis.text.x = element_blank()) +\n    scale_fill_viridis_d() + guides(fill = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## A lollipop chart\n\nA lollipop chart is a combination of two geometries.  It is a basic scatterplot combining one qualitative variable and the quantitative count of the number of observations.  The head of the lollipop is a point while there is an accompanying line segment from (x,0) to (x,Freq) where Freq is the default name for a count from a table.\n\n### Basic Lollipop Chart\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRisk.Table %>%\n    ggplot(., aes(x = Var1, y = Freq, color = Var1)) + geom_point(size = 6) + labs(x = \"Risk Level\",\n    y = \"Number of Funds\", color = \"Risk Level\") + geom_segment(aes(xend = Var1,\n    y = 0, yend = Freq)) + theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### Slicked Lollipop Chart by Adjusting Segment Size\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRisk.Table %>%\n    ggplot(., aes(x = Var1, y = Freq, color = Var1)) + geom_point(size = 6) + labs(x = \"Risk Levels\",\n    y = \"Number of Funds\") + geom_segment(aes(xend = Var1, y = 0, yend = Freq), size = 1.5) +\n    theme_minimal() + guides(color = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nRisk.Table %>%\n    ggplot(., aes(x = Var1, y = Freq, color = Var1)) + geom_point(size = 6) + labs(x = \"Risk Levels\",\n    y = \"Number of Funds\") + geom_segment(aes(xend = Var1, y = 0, yend = Freq)) +\n    theme_minimal() + scale_color_viridis_d() + guides(color = FALSE) + coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### A Lollipop Table [geom_label()]\n\nNow I will switch up the points to be the actual values as text.  For this, I use the `geom_text` aesthetic that requires a `label` to be assigned.  I also want to put down the lines before the text to avoid overlap.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRisk.Table %>%\n    ggplot(., aes(x = Var1, y = Freq, color = Var1, label = Freq)) + labs(x = \"Risk Levels\",\n    y = \"Number of Funds\") + geom_segment(aes(xend = Var1, y = 0, yend = Freq)) +\n    geom_label(size = 6) + theme_minimal() + scale_color_viridis_d() + guides(color = FALSE) +\n    coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### A Lollipop Table [geom_text() inverse]\n\nThe ggplot is built in layers so the segment before the label makes sure that the white shows up.  The fill and a discrete color are combined to create this graphical table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRisk.Table %>%\n    ggplot(., aes(x = Var1, y = Freq, color = Var1, fill = Var1, label = Freq)) +\n    geom_segment(aes(xend = Var1, y = 0, yend = Freq), size = 1.5) + geom_label(size = 6,\n    color = \"white\") + labs(x = \"Risk Levels\", y = \"Number of Funds\") + theme_minimal() +\n    scale_color_viridis_d() + scale_fill_viridis_d() + guides(fill = FALSE, color = FALSE) +\n    coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## I HATE PIE CHARTS\n\nA pie chart is fairly easy to do.  Let's go back and show something that I find pretty amazing.  A pie chart is a bar chart [the fill variety] with coordinates that fill a circle rather than a square.  We take the most basic bar plot -- Basic.Bar -- and add three things: new coordinates that are polar, labels, and a blank theme to eliminate axis labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBasic.Bar + coord_polar(\"y\", start = 0) + labs(x = \"\", y = \"\") + theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}