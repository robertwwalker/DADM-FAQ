{
  "hash": "35ae33f5566c99e75bfbf35d99e8ecb5",
  "result": {
    "markdown": "---\ntitle: A Quick and Dirty Introduction to R\nauthor: RWW\ndate: '2019-10-25'\nslug: a-quick-and-dirty-introduction-to-r\ncategories:\n  - R\n  - tidyverse\ntags:\n  - GSM Data\nimage: thumbnail.png\n---\n\n\n# Some Data\n\nI will start with some inline data.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse); library(skimr);\nSupport.Times <- structure(list(Screened = c(26.9, 28.4, 23.9, 21.8, 22.4, 25.9, \n26.5, 20, 23.7, 23.7, 22.6, 19.4, 27.3, 25.3, 27.7, 25.3, 28.4, \n24.2, 20.4, 29.6, 27, 23.6, 18.3, 28.1, 20.5, 24.1, 27.2, 26.4, \n24.5, 25.6, 17.9, 23.5, 25.3, 20.2, 26.3, 27.9), Not.Screened = c(24.7, \n19.1, 21, 17.8, 22.8, 24.4, 17.9, 20.5, 20, 26.2, 14.5, 22.4, \n21.1, 24.3, 22, 24.3, 23.9, 19.6, 23.8, 29.2, 19.7, 20.9, 25.2, \n22.5, 23.1, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA)), class = \"data.frame\", row.names = c(NA, -36L))\n```\n:::\n\n\nNow I will use the tidyverse to stack it.  This can also be done with `stack(Support.Times)`.\n\n```\nstack(Support.Times) %>% drop_na()\n```\n\nUsing the `tidyverse`, the new data `SSTimes` will stack the data using pivot longer into two variables that I will name `Self.Screen` and `Call.Time` to store the stacked data.  The final command drops the missing data.  Then I will group them and skim them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSSTimes <- Support.Times %>% pivot_longer(., c(Screened,Not.Screened), names_to = \"Self.Screen\", values_to = \"Call.Time\") %>% drop_na()\nSSTimes %>% group_by(Self.Screen) %>% skim()\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |            |\n|:------------------------|:-----------|\n|Name                     |Piped data  |\n|Number of rows           |61          |\n|Number of columns        |2           |\n|_______________________  |            |\n|Column type frequency:   |            |\n|numeric                  |1           |\n|________________________ |            |\n|Group variables          |Self.Screen |\n\n\n**Variable type: numeric**\n\n|skim_variable |Self.Screen  | n_missing| complete_rate|  mean|   sd|   p0|   p25|  p50|   p75| p100|hist  |\n|:-------------|:------------|---------:|-------------:|-----:|----:|----:|-----:|----:|-----:|----:|:-----|\n|Call.Time     |Not.Screened |         0|             1| 22.04| 3.11| 14.5| 20.00| 22.4| 24.30| 29.2|▁▅▇▇▁ |\n|Call.Time     |Screened     |         0|             1| 24.44| 3.08| 17.9| 22.55| 24.9| 26.92| 29.6|▃▃▆▇▅ |\n:::\n:::\n\n\nSo I have 25 observations that are not screened and 36 that are screened.  What does it look like?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(SSTimes, aes(x=Self.Screen, y=Call.Time, fill=Self.Screen)) + geom_violin(alpha = 0.2) + scale_fill_discrete(guide=FALSE) + labs(title = \"Self Screen and Non-Self Screen Call Times\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `guide` argument in `scale_*()` cannot be `FALSE`. This was deprecated in\nggplot2 3.3.4.\nℹ Please use \"none\" instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nHere is a picture of the distributions of the two means.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngplots::plotmeans(Call.Time~Self.Screen, data=SSTimes, n.label=FALSE, ci.label=TRUE, ylim=c(20,27))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\nWhat does the t-test look like?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt.test(Support.Times$Not.Screened, Support.Times$Screened)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWelch Two Sample t-test\n\ndata:  Support.Times$Not.Screened and Support.Times$Screened\nt = -2.9793, df = 51.512, p-value = 0.004399\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -4.0216630 -0.7841148\nsample estimates:\nmean of x mean of y \n 22.03600  24.43889 \n```\n:::\n\n```{.r .cell-code}\nt.test(Call.Time~Self.Screen, data=SSTimes)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWelch Two Sample t-test\n\ndata:  Call.Time by Self.Screen\nt = -2.9793, df = 51.512, p-value = 0.004399\nalternative hypothesis: true difference in means between group Not.Screened and group Screened is not equal to 0\n95 percent confidence interval:\n -4.0216630 -0.7841148\nsample estimates:\nmean in group Not.Screened     mean in group Screened \n                  22.03600                   24.43889 \n```\n:::\n:::\n\n\nIt is worth noting that R stores a bunch of stuff.  For example, it stores the standard error of the difference and that is worth looking at in this case; the standard error that describes the difference in the averages is 0.8065242.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nResample.Times <- ResampleProps::ResampleDiffMeans(Support.Times$Screened,Support.Times$Not.Screened)\nsd(Resample.Times)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.7953907\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}