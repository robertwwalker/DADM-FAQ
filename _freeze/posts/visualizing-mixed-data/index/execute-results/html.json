{
  "hash": "d9c5c1f4f3f6e3ce644a705b6b8137be",
  "result": {
    "markdown": "---\ntitle: Visualizing One Qualitative and One Quantitative Variable\nauthor: Robert W. Walker\ndate: '2023-01-25'\nslug: visualize-mixed-data\ncategories:\n  - R\n  - dataviz\ntags:\n  - plot\nsubtitle: ''\nsummary: ''\nauthors: []\nlastmod: '2023-01-25T09:04:06-07:00'\n---\n\n\n\n\n# Bonds\n\nA dataset for illustrating the various available visualizations needs a certain degree of richness with manageable size.  The dataset on *Bonds* contains three categorical and a few quantitative indicators sufficient to show what we might wish.\n\n## Loading the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds <- read.csv(url(\"https://raw.githubusercontent.com/robertwwalker/DADMStuff/master/BondFunds.csv\"))\n```\n:::\n\n\n## A Summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\nBonds %>%\n    skim()\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |           |\n|:------------------------|:----------|\n|Name                     |Piped data |\n|Number of rows           |184        |\n|Number of columns        |9          |\n|_______________________  |           |\n|Column type frequency:   |           |\n|character                |4          |\n|numeric                  |5          |\n|________________________ |           |\n|Group variables          |None       |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|Fund.Number   |         0|             1|   4|   6|     0|      184|          0|\n|Type          |         0|             1|  20|  23|     0|        2|          0|\n|Fees          |         0|             1|   2|   3|     0|        2|          0|\n|Risk          |         0|             1|   7|  13|     0|        3|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable  | n_missing| complete_rate|   mean|      sd|     p0|    p25|   p50|    p75|     p100|hist  |\n|:--------------|---------:|-------------:|------:|-------:|------:|------:|-----:|------:|--------:|:-----|\n|Assets         |         0|             1| 910.65| 2253.27|  12.40| 113.72| 268.4| 621.95| 18603.50|▇▁▁▁▁ |\n|Expense.Ratio  |         0|             1|   0.71|    0.26|   0.12|   0.53|   0.7|   0.90|     1.94|▂▇▅▁▁ |\n|Return.2009    |         0|             1|   7.16|    6.09|  -8.80|   3.48|   6.4|  10.72|    32.00|▁▇▅▁▁ |\n|X3.Year.Return |         0|             1|   4.66|    2.52| -13.80|   4.05|   5.1|   6.10|     9.40|▁▁▁▅▇ |\n|X5.Year.Return |         0|             1|   3.99|    1.49|  -7.30|   3.60|   4.3|   4.90|     6.80|▁▁▁▅▇ |\n:::\n:::\n\n\nMost data types are represented.  There is no time variable so dates and the visualizations that go with time series are omitted.\n\n# Data Visualization\n\nThere are three primary visualizations that we might use for the combination of one qualitative and one quantitative indicator.  I will deploy boxplots, violin plots, overlaid densities, and dotplots.\n\n\n## `geom_boxplot()`\n\nThis will construct a boxplot of quantitative y for each value of the qualitative variable placed on x.  This is very hard to read because of the extrema.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Risk, y = Assets)) + geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## `geom_dotplot()`\n\nThe number of bins, the axis they are placed on, and the size of the dots are core to dotplots.  It is often simply a matter of trial and error.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Risk, y = Assets, color = Risk)) + geom_dotplot(binaxis = \"y\",\n    bins = 50, dotsize = 0.3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in geom_dotplot(binaxis = \"y\", bins = 50, dotsize = 0.3): Ignoring\nunknown parameters: `bins`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### Improved\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Risk, y = Assets, color = Risk)) + geom_dotplot(binaxis = \"y\",\n    bins = 50, dotsize = 0.3) + guides(color = FALSE) + theme_minimal()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in geom_dotplot(binaxis = \"y\", bins = 50, dotsize = 0.3): Ignoring\nunknown parameters: `bins`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `<scale>` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n## `geom_violin()`\n\nThe most basic violin plot shows a two-sided density plot for each value of x.  By default, all violins have the same area.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Risk, y = Assets)) + geom_violin()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n### Adjusting the area: `scale=count`\n\nWe can adjust the violins to have area proportional to the count of observations by deploying the scale argument set equal to count.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Risk, y = Assets)) + geom_violin(scale = \"count\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Adjusting the area: `scale=width`\n\nWe can also adjust the violins to have equal width.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Risk, y = Assets)) + geom_violin(scale = \"width\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Adjusting the bandwidth\n\nWe can also make the violins smoother or more rigid with the `adjust=` argument.  Numbers greater than one make it smoother.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Risk, y = Assets)) + geom_violin(scale = \"count\", adjust = 2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nNumbers less than one make it less smooth.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Risk, y = Assets)) + geom_violin(scale = \"count\", adjust = 1/2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## `geom_density()` with color/fill\n\nWe can color the lines of a density plot to try and showcase the various distributions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Assets, color = Risk)) + geom_density()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\nWe fill the shape of density plot to try and showcase the various distributions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Assets, fill = Risk)) + geom_density()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nThis almost always needs lightening.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Assets, fill = Risk)) + geom_density(alpha = 0.2)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nIn this case, it helps to remove the outline.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBonds %>%\n    ggplot(., aes(x = Assets, fill = Risk)) + geom_density(alpha = 0.2, color = NA)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n## `geom_beeswarm()`\n\nRelated to the dotplot is the beeswarm.  It requires installing a package with the geometry known as ggbeeswarm.\n\n```\ninstall.packages(\"ggbeeswarm\")\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggbeeswarm)\nBonds %>%\n    ggplot() + aes(x = Risk, y = Assets) + geom_beeswarm()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggbeeswarm)\nBonds %>%\n    ggplot() + aes(x = Risk, y = Assets, color = Risk) + geom_beeswarm() + guides(color = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}